{"version":3,"file":"react-final-form-arrays.umd.min.js","sources":["../src/defaultIsEqual.js","../src/useConstant.js","../src/useFieldArray.js","../src/FieldArray.js","../src/renderComponent.js"],"sourcesContent":["// @flow\r\nconst defaultIsEqual = (aArray: any[], bArray: any[]) =>\r\n  aArray === bArray ||\r\n  (Array.isArray(aArray) &&\r\n    Array.isArray(bArray) &&\r\n    aArray.length === bArray.length &&\r\n    !aArray.some((a, index) => a !== bArray[index]))\r\n\r\nexport default defaultIsEqual\r\n","// @flow\r\nimport React from 'react'\r\n\r\n/**\r\n * A simple hook to create a constant value that lives for\r\n * the lifetime of the component.\r\n *\r\n * Plagiarized from https://github.com/Andarist/use-constant\r\n *\r\n * Do NOT reuse this code unless you know what you're doing.\r\n * Use Andarist's hook; it's more fault tolerant to things like\r\n * falsy values.\r\n *\r\n * @param {Function} init - A function to generate the value\r\n */\r\nexport default function useConstant<T>(init: () => T): T {\r\n  const ref = React.useRef<?T>()\r\n  if (!ref.current) {\r\n    ref.current = init()\r\n  }\r\n  return ref.current\r\n}\r\n","// @flow\r\nimport { useForm, useField } from 'react-final-form'\r\nimport { fieldSubscriptionItems, ARRAY_ERROR } from 'final-form'\r\nimport type { Mutators } from 'final-form-arrays'\r\nimport type { FieldValidator, FieldSubscription } from 'final-form'\r\nimport type { FieldArrayRenderProps, UseFieldArrayConfig } from './types'\r\nimport defaultIsEqual from './defaultIsEqual'\r\nimport useConstant from './useConstant'\r\n\r\nconst all: FieldSubscription = fieldSubscriptionItems.reduce((result, key) => {\r\n  result[key] = true\r\n  return result\r\n}, {})\r\n\r\nconst useFieldArray = (\r\n  name: string,\r\n  {\r\n    subscription = all,\r\n    defaultValue,\r\n    initialValue,\r\n    isEqual = defaultIsEqual,\r\n    validate: validateProp\r\n  }: UseFieldArrayConfig = {}\r\n): FieldArrayRenderProps => {\r\n  const form = useForm('useFieldArray')\r\n\r\n  const formMutators: Mutators = form.mutators\r\n  const hasMutators = !!(formMutators && formMutators.push && formMutators.pop)\r\n  if (!hasMutators) {\r\n    throw new Error(\r\n      'Array mutators not found. You need to provide the mutators from final-form-arrays to your form'\r\n    )\r\n  }\r\n  const mutators = useConstant<Mutators>(() =>\r\n    // curry the field name onto all mutator calls\r\n    Object.keys(formMutators).reduce((result, key) => {\r\n      result[key] = (...args) => formMutators[key](name, ...args)\r\n      return result\r\n    }, {})\r\n  )\r\n\r\n  const validate: FieldValidator = useConstant(\r\n    () => (value, allValues, meta) => {\r\n      if (!validateProp) return undefined\r\n      const error = validateProp(value, allValues, meta)\r\n      if (!error || Array.isArray(error)) {\r\n        return error\r\n      } else {\r\n        const arrayError = []\r\n        // gross, but we have to set a string key on the array\r\n        ;((arrayError: any): Object)[ARRAY_ERROR] = error\r\n        return arrayError\r\n      }\r\n    }\r\n  )\r\n\r\n  const {\r\n    meta: { length, ...meta },\r\n    input,\r\n    ...fieldState\r\n  } = useField(name, {\r\n    subscription: { ...subscription, length: true },\r\n    defaultValue,\r\n    initialValue,\r\n    isEqual,\r\n    validate,\r\n    format: v => v\r\n  })\r\n\r\n  const forEach = (iterator: (name: string, index: number) => void): void => {\r\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\r\n    // istanbul ignore next\r\n    const len = length || 0\r\n    for (let i = 0; i < len; i++) {\r\n      iterator(`${name}[${i}]`, i)\r\n    }\r\n  }\r\n\r\n  const map = (iterator: (name: string, index: number) => any): any[] => {\r\n    // required || for Flow, but results in uncovered line in Jest/Istanbul\r\n    // istanbul ignore next\r\n    const len = length || 0\r\n    const results: any[] = []\r\n    for (let i = 0; i < len; i++) {\r\n      results.push(iterator(`${name}[${i}]`, i))\r\n    }\r\n    return results\r\n  }\r\n\r\n  return {\r\n    fields: {\r\n      name,\r\n      forEach,\r\n      length: length || 0,\r\n      map,\r\n      ...mutators,\r\n      ...fieldState,\r\n      value: input.value\r\n    },\r\n    meta\r\n  }\r\n}\r\n\r\nexport default useFieldArray\r\n","// @flow\r\nimport { version as ffVersion } from 'final-form'\r\nimport { version as rffVersion } from 'react-final-form'\r\nimport type { FieldArrayProps } from './types'\r\nimport renderComponent from './renderComponent'\r\nimport useFieldArray from './useFieldArray'\r\nimport { version } from '../package.json'\r\n\r\nexport { version }\r\n\r\nconst versions = {\r\n  'final-form': ffVersion,\r\n  'react-final-form': rffVersion,\r\n  'react-final-form-arrays': version\r\n}\r\n\r\nconst FieldArray = ({\r\n  name,\r\n  subscription,\r\n  defaultValue,\r\n  initialValue,\r\n  isEqual,\r\n  validate,\r\n  ...rest\r\n}: FieldArrayProps) => {\r\n  const { fields, meta } = useFieldArray(name, {\r\n    subscription,\r\n    defaultValue,\r\n    initialValue,\r\n    isEqual,\r\n    validate\r\n  })\r\n\r\n  return renderComponent(\r\n    {\r\n      fields,\r\n      meta: {\r\n        ...meta,\r\n        __versions: versions\r\n      },\r\n      ...rest\r\n    },\r\n    `FieldArray(${name})`\r\n  )\r\n}\r\n\r\nexport default FieldArray\r\n","// @flow\r\nimport * as React from 'react'\r\nimport type { RenderableProps } from './types'\r\n\r\n// shared logic between components that use either render prop,\r\n// children render function, or component prop\r\nexport default function renderComponent<T>(\r\n  props: RenderableProps<T> & T,\r\n  name: string\r\n): React.Node {\r\n  const { render, children, component, ...rest } = props\r\n  if (component) {\r\n    return React.createElement(component, { ...rest, children, render }) // inject children back in\r\n  }\r\n  if (render) {\r\n    return render(children === undefined ? rest : { ...rest, children }) // inject children back in\r\n  }\r\n  if (typeof children !== 'function') {\r\n    throw new Error(\r\n      `Must specify either a render prop, a render function as children, or a component prop to ${name}`\r\n    )\r\n  }\r\n  return children(rest)\r\n}\r\n"],"names":["defaultIsEqual","aArray","bArray","Array","isArray","length","some","a","index","useConstant","init","ref","React","useRef","current","useFieldArray","name","subscription","all","defaultValue","initialValue","isEqual","validateProp","validate","formMutators","useForm","mutators","push","pop","Error","Object","keys","reduce","result","key","args","value","allValues","meta","error","arrayError","ARRAY_ERROR","useField","format","v","input","fieldState","fields","forEach","iterator","len","i","map","results","fieldSubscriptionItems","versions","ffVersion","rffVersion","version","rest","props","render","children","component","undefined","renderComponent","__versions"],"mappings":"uuBACuB,SAAjBA,EAAkBC,EAAeC,UACrCD,IAAWC,GACVC,MAAMC,QAAQH,IACbE,MAAMC,QAAQF,IACdD,EAAOI,SAAWH,EAAOG,SACxBJ,EAAOK,KAAK,SAACC,EAAGC,UAAUD,IAAML,EAAOM,KCS7B,SAASC,EAAeC,OAC/BC,EAAMC,UAAMC,gBACbF,EAAIG,UACPH,EAAIG,QAAUJ,KAETC,EAAIG,QCNS,SAAhBC,EACJC,SAEEC,4BAKuB,MALvBA,cAAeC,IACfC,IAAAA,aACAC,IAAAA,aACAC,gBAAAA,SAAUrB,IACAsB,IAAVC,SAKIC,EAFOC,UAAQ,iBAEeC,gBACbF,GAAgBA,EAAaG,MAAQH,EAAaI,WAEjE,IAAIC,MACR,sGAGEH,EAAWjB,EAAsB,kBAErCqB,OAAOC,KAAKP,GAAcQ,OAAO,SAACC,EAAQC,UACxCD,EAAOC,GAAO,sCAAIC,2BAAAA,yBAASX,EAAaU,SAAbV,GAAkBR,UAASmB,KAC/CF,GACN,MAGCV,EAA2Bd,EAC/B,kBAAM,SAAC2B,EAAOC,EAAWC,MAClBhB,GACCiB,EAAQjB,EAAac,EAAOC,EAAWC,OACxCC,GAASpC,MAAMC,QAAQmC,UACnBA,EAEDC,EAAa,UAEhBA,EAA0BC,eAAeF,EACrCC,QASTE,WAAS1B,EAAM,CACjBC,0BAAmBA,GAAcZ,QAAQ,IACzCc,aAAAA,EACAC,aAAAA,EACAC,QAAAA,EACAE,SAAAA,EACAoB,OAAQ,SAAAC,UAAKA,KATLvC,OAARiC,MAAQjC,OAAWiC,0BACnBO,IAAAA,MACGC,sCA8BE,CACLC,kBACE/B,KAAAA,EACAgC,QAvBY,SAACC,WAGTC,EAAM7C,GAAU,EACb8C,EAAI,EAAGA,EAAID,EAAKC,IACvBF,EAAYjC,MAAQmC,MAAMA,IAmB1B9C,OAAQA,GAAU,EAClB+C,IAhBQ,SAACH,WAGLC,EAAM7C,GAAU,EAChBgD,EAAiB,GACdF,EAAI,EAAGA,EAAID,EAAKC,IACvBE,EAAQ1B,KAAKsB,EAAYjC,MAAQmC,MAAMA,WAElCE,IASF3B,EACAoB,GACHV,MAAOS,EAAMT,QAEfE,KAAAA,GA1FJ,IAAMpB,EAAyBoC,yBAAuBtB,OAAO,SAACC,EAAQC,UACpED,EAAOC,IAAO,EACPD,GACN,cCFGsB,EAAW,cACDC,6BACMC,oCACOC,gBAGV,gBACjB1C,IAAAA,KACAC,IAAAA,aACAE,IAAAA,aACAC,IAAAA,aACAC,IAAAA,QACAE,IAAAA,SACGoC,4FAEsB5C,EAAcC,EAAM,CAC3CC,aAAAA,EACAE,aAAAA,EACAC,aAAAA,EACAC,QAAAA,EACAE,SAAAA,IALMwB,IAAAA,OAAQT,IAAAA,YCnBH,SACbsB,EACA5C,OAEQ6C,EAAyCD,EAAzCC,OAAQC,EAAiCF,EAAjCE,SAAUC,EAAuBH,EAAvBG,UAAcJ,YAASC,wCAC7CG,SACKnD,gBAAoBmD,eAAgBJ,GAAMG,SAAAA,EAAUD,OAAAA,QAEzDA,SACKA,OAAoBG,IAAbF,EAAyBH,eAAYA,GAAMG,SAAAA,QAEnC,mBAAbA,QACH,IAAIjC,kGACoFb,UAGzF8C,EAASH,GDWTM,YAEHlB,OAAAA,EACAT,kBACKA,GACH4B,WAAYX,KAEXI,iBAES3C"}